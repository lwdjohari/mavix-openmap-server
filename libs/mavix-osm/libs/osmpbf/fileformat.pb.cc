// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileformat.proto

#include "fileformat.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace OSMPBF {
template <typename>
PROTOBUF_CONSTEXPR Blob::Blob(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.raw_size_)*/ 0

  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BlobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlobDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlobDefaultTypeInternal() {}
  union {
    Blob _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlobDefaultTypeInternal _Blob_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlobHeader::BlobHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.indexdata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.datasize_)*/ 0
} {}
struct BlobHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlobHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlobHeaderDefaultTypeInternal() {}
  union {
    BlobHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlobHeaderDefaultTypeInternal _BlobHeader_default_instance_;
}  // namespace OSMPBF
static ::_pb::Metadata file_level_metadata_fileformat_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_fileformat_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_fileformat_2eproto = nullptr;
const ::uint32_t TableStruct_fileformat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Blob, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Blob, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Blob, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Blob, _impl_.raw_size_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Blob, _impl_.data_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::OSMPBF::BlobHeader, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::BlobHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::BlobHeader, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::BlobHeader, _impl_.indexdata_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::BlobHeader, _impl_.datasize_),
    0,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::OSMPBF::Blob)},
        { 23, 34, -1, sizeof(::OSMPBF::BlobHeader)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::OSMPBF::_Blob_default_instance_._instance,
    &::OSMPBF::_BlobHeader_default_instance_._instance,
};
const char descriptor_table_protodef_fileformat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020fileformat.proto\022\006OSMPBF\"\245\001\n\004Blob\022\020\n\010r"
    "aw_size\030\002 \001(\005\022\r\n\003raw\030\001 \001(\014H\000\022\023\n\tzlib_dat"
    "a\030\003 \001(\014H\000\022\023\n\tlzma_data\030\004 \001(\014H\000\022!\n\023OBSOLE"
    "TE_bzip2_data\030\005 \001(\014B\002\030\001H\000\022\022\n\010lz4_data\030\006 "
    "\001(\014H\000\022\023\n\tzstd_data\030\007 \001(\014H\000B\006\n\004data\"\?\n\nBl"
    "obHeader\022\014\n\004type\030\001 \002(\t\022\021\n\tindexdata\030\002 \001("
    "\014\022\020\n\010datasize\030\003 \002(\005B\017\n\rcrosby.binary"
};
static ::absl::once_flag descriptor_table_fileformat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fileformat_2eproto = {
    false,
    false,
    276,
    descriptor_table_protodef_fileformat_2eproto,
    "fileformat.proto",
    &descriptor_table_fileformat_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_fileformat_2eproto::offsets,
    file_level_metadata_fileformat_2eproto,
    file_level_enum_descriptors_fileformat_2eproto,
    file_level_service_descriptors_fileformat_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fileformat_2eproto_getter() {
  return &descriptor_table_fileformat_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fileformat_2eproto(&descriptor_table_fileformat_2eproto);
namespace OSMPBF {
// ===================================================================

class Blob::_Internal {
 public:
  using HasBits = decltype(std::declval<Blob>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Blob, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Blob, _impl_._oneof_case_);
  static void set_has_raw_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Blob::Blob(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.Blob)
}
Blob::Blob(const Blob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Blob* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_size_) {}

    , decltype(_impl_.data_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.raw_size_ = from._impl_.raw_size_;
  clear_has_data();
  switch (from.data_case()) {
    case kRaw: {
      _this->_internal_set_raw(from._internal_raw());
      break;
    }
    case kZlibData: {
      _this->_internal_set_zlib_data(from._internal_zlib_data());
      break;
    }
    case kLzmaData: {
      _this->_internal_set_lzma_data(from._internal_lzma_data());
      break;
    }
    case kOBSOLETEBzip2Data: {
      _this->_internal_set_obsolete_bzip2_data(from._internal_obsolete_bzip2_data());
      break;
    }
    case kLz4Data: {
      _this->_internal_set_lz4_data(from._internal_lz4_data());
      break;
    }
    case kZstdData: {
      _this->_internal_set_zstd_data(from._internal_zstd_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:OSMPBF.Blob)
}

inline void Blob::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.raw_size_) { 0 }

    , decltype(_impl_.data_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

Blob::~Blob() {
  // @@protoc_insertion_point(destructor:OSMPBF.Blob)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Blob::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void Blob::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Blob::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:OSMPBF.Blob)
  switch (data_case()) {
    case kRaw: {
      _impl_.data_.raw_.Destroy();
      break;
    }
    case kZlibData: {
      _impl_.data_.zlib_data_.Destroy();
      break;
    }
    case kLzmaData: {
      _impl_.data_.lzma_data_.Destroy();
      break;
    }
    case kOBSOLETEBzip2Data: {
      _impl_.data_.obsolete_bzip2_data_.Destroy();
      break;
    }
    case kLz4Data: {
      _impl_.data_.lz4_data_.Destroy();
      break;
    }
    case kZstdData: {
      _impl_.data_.zstd_data_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void Blob::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.Blob)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.raw_size_ = 0;
  clear_data();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Blob::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 raw_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_raw_size(&has_bits);
          _impl_.raw_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes zlib_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_zlib_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes lzma_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_lzma_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_obsolete_bzip2_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes lz4_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_lz4_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes zstd_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_zstd_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Blob::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.Blob)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw = 1;
  if (data_case() == kRaw) {
    const std::string& _s = this->_internal_raw();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 raw_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_raw_size(), target);
  }

  switch (data_case()) {
    case kZlibData: {
      const std::string& _s = this->_internal_zlib_data();
      target = stream->WriteBytesMaybeAliased(3, _s, target);
      break;
    }
    case kLzmaData: {
      const std::string& _s = this->_internal_lzma_data();
      target = stream->WriteBytesMaybeAliased(4, _s, target);
      break;
    }
    case kOBSOLETEBzip2Data: {
      const std::string& _s = this->_internal_obsolete_bzip2_data();
      target = stream->WriteBytesMaybeAliased(5, _s, target);
      break;
    }
    case kLz4Data: {
      const std::string& _s = this->_internal_lz4_data();
      target = stream->WriteBytesMaybeAliased(6, _s, target);
      break;
    }
    case kZstdData: {
      const std::string& _s = this->_internal_zstd_data();
      target = stream->WriteBytesMaybeAliased(7, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.Blob)
  return target;
}

::size_t Blob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.Blob)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 raw_size = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_raw_size());
  }

  switch (data_case()) {
    // bytes raw = 1;
    case kRaw: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_raw());
      break;
    }
    // bytes zlib_data = 3;
    case kZlibData: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_zlib_data());
      break;
    }
    // bytes lzma_data = 4;
    case kLzmaData: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_lzma_data());
      break;
    }
    // bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
    case kOBSOLETEBzip2Data: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_obsolete_bzip2_data());
      break;
    }
    // bytes lz4_data = 6;
    case kLz4Data: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_lz4_data());
      break;
    }
    // bytes zstd_data = 7;
    case kZstdData: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_zstd_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Blob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Blob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Blob::GetClassData() const { return &_class_data_; }


void Blob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Blob*>(&to_msg);
  auto& from = static_cast<const Blob&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.Blob)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_raw_size(from._internal_raw_size());
  }
  switch (from.data_case()) {
    case kRaw: {
      _this->_internal_set_raw(from._internal_raw());
      break;
    }
    case kZlibData: {
      _this->_internal_set_zlib_data(from._internal_zlib_data());
      break;
    }
    case kLzmaData: {
      _this->_internal_set_lzma_data(from._internal_lzma_data());
      break;
    }
    case kOBSOLETEBzip2Data: {
      _this->_internal_set_obsolete_bzip2_data(from._internal_obsolete_bzip2_data());
      break;
    }
    case kLz4Data: {
      _this->_internal_set_lz4_data(from._internal_lz4_data());
      break;
    }
    case kZstdData: {
      _this->_internal_set_zstd_data(from._internal_zstd_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Blob::CopyFrom(const Blob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.Blob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blob::IsInitialized() const {
  return true;
}

void Blob::InternalSwap(Blob* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.raw_size_, other->_impl_.raw_size_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Blob::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fileformat_2eproto_getter, &descriptor_table_fileformat_2eproto_once,
      file_level_metadata_fileformat_2eproto[0]);
}
// ===================================================================

class BlobHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<BlobHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlobHeader, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_indexdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_datasize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

BlobHeader::BlobHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.BlobHeader)
}
BlobHeader::BlobHeader(const BlobHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlobHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.indexdata_) {}

    , decltype(_impl_.datasize_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _impl_.indexdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.indexdata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.indexdata_.Set(from._internal_indexdata(), _this->GetArenaForAllocation());
  }
  _this->_impl_.datasize_ = from._impl_.datasize_;
  // @@protoc_insertion_point(copy_constructor:OSMPBF.BlobHeader)
}

inline void BlobHeader::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.indexdata_) {}

    , decltype(_impl_.datasize_) { 0 }

  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.indexdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.indexdata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlobHeader::~BlobHeader() {
  // @@protoc_insertion_point(destructor:OSMPBF.BlobHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlobHeader::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.indexdata_.Destroy();
}

void BlobHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlobHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.BlobHeader)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.indexdata_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.datasize_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlobHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "OSMPBF.BlobHeader.type");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes indexdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_indexdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 datasize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_datasize(&has_bits);
          _impl_.datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlobHeader::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.BlobHeader)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "OSMPBF.BlobHeader.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bytes indexdata = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_indexdata();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // required int32 datasize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_datasize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.BlobHeader)
  return target;
}

::size_t BlobHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:OSMPBF.BlobHeader)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string type = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required int32 datasize = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_datasize());
  }

  return total_size;
}
::size_t BlobHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.BlobHeader)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());

    // required int32 datasize = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_datasize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes indexdata = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_indexdata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlobHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlobHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlobHeader::GetClassData() const { return &_class_data_; }


void BlobHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlobHeader*>(&to_msg);
  auto& from = static_cast<const BlobHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.BlobHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_indexdata(from._internal_indexdata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.datasize_ = from._impl_.datasize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlobHeader::CopyFrom(const BlobHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.BlobHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void BlobHeader::InternalSwap(BlobHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.indexdata_, lhs_arena,
                                       &other->_impl_.indexdata_, rhs_arena);

  swap(_impl_.datasize_, other->_impl_.datasize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fileformat_2eproto_getter, &descriptor_table_fileformat_2eproto_once,
      file_level_metadata_fileformat_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace OSMPBF
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OSMPBF::Blob*
Arena::CreateMaybeMessage< ::OSMPBF::Blob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::Blob >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::BlobHeader*
Arena::CreateMaybeMessage< ::OSMPBF::BlobHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::BlobHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
