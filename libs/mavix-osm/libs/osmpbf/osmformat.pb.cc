// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmformat.proto

#include "osmformat.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace OSMPBF {
template <typename>
PROTOBUF_CONSTEXPR HeaderBlock::HeaderBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.required_features_)*/{}
  , /*decltype(_impl_.optional_features_)*/{}
  , /*decltype(_impl_.writingprogram_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.osmosis_replication_base_url_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bbox_)*/nullptr
  , /*decltype(_impl_.osmosis_replication_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.osmosis_replication_sequence_number_)*/ ::int64_t{0}
} {}
struct HeaderBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderBlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderBlockDefaultTypeInternal() {}
  union {
    HeaderBlock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderBlockDefaultTypeInternal _HeaderBlock_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HeaderBBox::HeaderBBox(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_)*/ ::int64_t{0}

  , /*decltype(_impl_.right_)*/ ::int64_t{0}

  , /*decltype(_impl_.top_)*/ ::int64_t{0}

  , /*decltype(_impl_.bottom_)*/ ::int64_t{0}
} {}
struct HeaderBBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderBBoxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderBBoxDefaultTypeInternal() {}
  union {
    HeaderBBox _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderBBoxDefaultTypeInternal _HeaderBBox_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PrimitiveBlock::PrimitiveBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.primitivegroup_)*/{}
  , /*decltype(_impl_.stringtable_)*/nullptr
  , /*decltype(_impl_.lat_offset_)*/ ::int64_t{0}

  , /*decltype(_impl_.lon_offset_)*/ ::int64_t{0}

  , /*decltype(_impl_.granularity_)*/ 100

  , /*decltype(_impl_.date_granularity_)*/ 1000
} {}
struct PrimitiveBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimitiveBlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimitiveBlockDefaultTypeInternal() {}
  union {
    PrimitiveBlock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimitiveBlockDefaultTypeInternal _PrimitiveBlock_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PrimitiveGroup::PrimitiveGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.ways_)*/{}
  , /*decltype(_impl_.relations_)*/{}
  , /*decltype(_impl_.changesets_)*/{}
  , /*decltype(_impl_.dense_)*/nullptr} {}
struct PrimitiveGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimitiveGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimitiveGroupDefaultTypeInternal() {}
  union {
    PrimitiveGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimitiveGroupDefaultTypeInternal _PrimitiveGroup_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StringTable::StringTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.s_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringTableDefaultTypeInternal() {}
  union {
    StringTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringTableDefaultTypeInternal _StringTable_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Info::Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.changeset_)*/ ::int64_t{0}

  , /*decltype(_impl_.uid_)*/ 0

  , /*decltype(_impl_.user_sid_)*/ 0u

  , /*decltype(_impl_.visible_)*/ false

  , /*decltype(_impl_.version_)*/ -1
} {}
struct InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoDefaultTypeInternal() {}
  union {
    Info _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoDefaultTypeInternal _Info_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DenseInfo::DenseInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/ {}
  ,/* _impl_._version_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.timestamp_)*/ {}
  ,/* _impl_._timestamp_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.changeset_)*/ {}
  ,/* _impl_._changeset_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.uid_)*/ {}
  ,/* _impl_._uid_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.user_sid_)*/ {}
  ,/* _impl_._user_sid_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.visible_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DenseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenseInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenseInfoDefaultTypeInternal() {}
  union {
    DenseInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenseInfoDefaultTypeInternal _DenseInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChangeSet::ChangeSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ ::int64_t{0}
} {}
struct ChangeSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeSetDefaultTypeInternal() {}
  union {
    ChangeSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeSetDefaultTypeInternal _ChangeSet_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/ {}
  ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.vals_)*/ {}
  ,/* _impl_._vals_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.id_)*/ ::int64_t{0}

  , /*decltype(_impl_.lat_)*/ ::int64_t{0}

  , /*decltype(_impl_.lon_)*/ ::int64_t{0}
} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DenseNodes::DenseNodes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ {}
  ,/* _impl_._id_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.lat_)*/ {}
  ,/* _impl_._lat_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.lon_)*/ {}
  ,/* _impl_._lon_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.keys_vals_)*/ {}
  ,/* _impl_._keys_vals_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.denseinfo_)*/nullptr} {}
struct DenseNodesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenseNodesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenseNodesDefaultTypeInternal() {}
  union {
    DenseNodes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenseNodesDefaultTypeInternal _DenseNodes_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Way::Way(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/ {}
  ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.vals_)*/ {}
  ,/* _impl_._vals_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.refs_)*/ {}
  ,/* _impl_._refs_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.lat_)*/ {}
  ,/* _impl_._lat_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.lon_)*/ {}
  ,/* _impl_._lon_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.id_)*/ ::int64_t{0}
} {}
struct WayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WayDefaultTypeInternal() {}
  union {
    Way _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WayDefaultTypeInternal _Way_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Relation::Relation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/ {}
  ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.vals_)*/ {}
  ,/* _impl_._vals_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.roles_sid_)*/ {}
  ,/* _impl_._roles_sid_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.memids_)*/ {}
  ,/* _impl_._memids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.types_)*/ {}
  , /*decltype(_impl_._types_cached_byte_size_)*/ { 0 }

  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.id_)*/ ::int64_t{0}
} {}
struct RelationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelationDefaultTypeInternal() {}
  union {
    Relation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelationDefaultTypeInternal _Relation_default_instance_;
}  // namespace OSMPBF
static ::_pb::Metadata file_level_metadata_osmformat_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_osmformat_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_osmformat_2eproto = nullptr;
const ::uint32_t TableStruct_osmformat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBlock, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBlock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBlock, _impl_.bbox_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBlock, _impl_.required_features_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBlock, _impl_.optional_features_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBlock, _impl_.writingprogram_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBlock, _impl_.source_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBlock, _impl_.osmosis_replication_timestamp_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBlock, _impl_.osmosis_replication_sequence_number_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBlock, _impl_.osmosis_replication_base_url_),
    3,
    ~0u,
    ~0u,
    0,
    1,
    4,
    5,
    2,
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBBox, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBBox, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBBox, _impl_.left_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBBox, _impl_.right_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBBox, _impl_.top_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::HeaderBBox, _impl_.bottom_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveBlock, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveBlock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveBlock, _impl_.stringtable_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveBlock, _impl_.primitivegroup_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveBlock, _impl_.granularity_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveBlock, _impl_.lat_offset_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveBlock, _impl_.lon_offset_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveBlock, _impl_.date_granularity_),
    0,
    ~0u,
    3,
    1,
    2,
    4,
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveGroup, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveGroup, _impl_.nodes_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveGroup, _impl_.dense_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveGroup, _impl_.ways_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveGroup, _impl_.relations_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::PrimitiveGroup, _impl_.changesets_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::OSMPBF::StringTable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::StringTable, _impl_.s_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Info, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Info, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Info, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Info, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Info, _impl_.changeset_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Info, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Info, _impl_.user_sid_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Info, _impl_.visible_),
    5,
    0,
    1,
    2,
    3,
    4,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseInfo, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseInfo, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseInfo, _impl_.changeset_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseInfo, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseInfo, _impl_.user_sid_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseInfo, _impl_.visible_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::ChangeSet, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::ChangeSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::ChangeSet, _impl_.id_),
    0,
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Node, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Node, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Node, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Node, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Node, _impl_.vals_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Node, _impl_.info_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Node, _impl_.lat_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Node, _impl_.lon_),
    1,
    ~0u,
    ~0u,
    0,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseNodes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseNodes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseNodes, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseNodes, _impl_.denseinfo_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseNodes, _impl_.lat_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseNodes, _impl_.lon_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::DenseNodes, _impl_.keys_vals_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Way, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Way, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Way, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Way, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Way, _impl_.vals_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Way, _impl_.info_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Way, _impl_.refs_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Way, _impl_.lat_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Way, _impl_.lon_),
    1,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Relation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Relation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Relation, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Relation, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Relation, _impl_.vals_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Relation, _impl_.info_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Relation, _impl_.roles_sid_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Relation, _impl_.memids_),
    PROTOBUF_FIELD_OFFSET(::OSMPBF::Relation, _impl_.types_),
    1,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::OSMPBF::HeaderBlock)},
        { 24, 36, -1, sizeof(::OSMPBF::HeaderBBox)},
        { 40, 54, -1, sizeof(::OSMPBF::PrimitiveBlock)},
        { 60, 73, -1, sizeof(::OSMPBF::PrimitiveGroup)},
        { 78, -1, -1, sizeof(::OSMPBF::StringTable)},
        { 87, 101, -1, sizeof(::OSMPBF::Info)},
        { 107, -1, -1, sizeof(::OSMPBF::DenseInfo)},
        { 121, 130, -1, sizeof(::OSMPBF::ChangeSet)},
        { 131, 145, -1, sizeof(::OSMPBF::Node)},
        { 151, 164, -1, sizeof(::OSMPBF::DenseNodes)},
        { 169, 184, -1, sizeof(::OSMPBF::Way)},
        { 191, 206, -1, sizeof(::OSMPBF::Relation)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::OSMPBF::_HeaderBlock_default_instance_._instance,
    &::OSMPBF::_HeaderBBox_default_instance_._instance,
    &::OSMPBF::_PrimitiveBlock_default_instance_._instance,
    &::OSMPBF::_PrimitiveGroup_default_instance_._instance,
    &::OSMPBF::_StringTable_default_instance_._instance,
    &::OSMPBF::_Info_default_instance_._instance,
    &::OSMPBF::_DenseInfo_default_instance_._instance,
    &::OSMPBF::_ChangeSet_default_instance_._instance,
    &::OSMPBF::_Node_default_instance_._instance,
    &::OSMPBF::_DenseNodes_default_instance_._instance,
    &::OSMPBF::_Way_default_instance_._instance,
    &::OSMPBF::_Relation_default_instance_._instance,
};
const char descriptor_table_protodef_osmformat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017osmformat.proto\022\006OSMPBF\"\207\002\n\013HeaderBloc"
    "k\022 \n\004bbox\030\001 \001(\0132\022.OSMPBF.HeaderBBox\022\031\n\021r"
    "equired_features\030\004 \003(\t\022\031\n\021optional_featu"
    "res\030\005 \003(\t\022\026\n\016writingprogram\030\020 \001(\t\022\016\n\006sou"
    "rce\030\021 \001(\t\022%\n\035osmosis_replication_timesta"
    "mp\030  \001(\003\022+\n#osmosis_replication_sequence"
    "_number\030! \001(\003\022$\n\034osmosis_replication_bas"
    "e_url\030\" \001(\t\"F\n\nHeaderBBox\022\014\n\004left\030\001 \002(\022\022"
    "\r\n\005right\030\002 \002(\022\022\013\n\003top\030\003 \002(\022\022\016\n\006bottom\030\004 "
    "\002(\022\"\322\001\n\016PrimitiveBlock\022(\n\013stringtable\030\001 "
    "\002(\0132\023.OSMPBF.StringTable\022.\n\016primitivegro"
    "up\030\002 \003(\0132\026.OSMPBF.PrimitiveGroup\022\030\n\013gran"
    "ularity\030\021 \001(\005:\003100\022\025\n\nlat_offset\030\023 \001(\003:\001"
    "0\022\025\n\nlon_offset\030\024 \001(\003:\0010\022\036\n\020date_granula"
    "rity\030\022 \001(\005:\0041000\"\267\001\n\016PrimitiveGroup\022\033\n\005n"
    "odes\030\001 \003(\0132\014.OSMPBF.Node\022!\n\005dense\030\002 \001(\0132"
    "\022.OSMPBF.DenseNodes\022\031\n\004ways\030\003 \003(\0132\013.OSMP"
    "BF.Way\022#\n\trelations\030\004 \003(\0132\020.OSMPBF.Relat"
    "ion\022%\n\nchangesets\030\005 \003(\0132\021.OSMPBF.ChangeS"
    "et\"\030\n\013StringTable\022\t\n\001s\030\001 \003(\014\"q\n\004Info\022\023\n\007"
    "version\030\001 \001(\005:\002-1\022\021\n\ttimestamp\030\002 \001(\003\022\021\n\t"
    "changeset\030\003 \001(\003\022\013\n\003uid\030\004 \001(\005\022\020\n\010user_sid"
    "\030\005 \001(\r\022\017\n\007visible\030\006 \001(\010\"\212\001\n\tDenseInfo\022\023\n"
    "\007version\030\001 \003(\005B\002\020\001\022\025\n\ttimestamp\030\002 \003(\022B\002\020"
    "\001\022\025\n\tchangeset\030\003 \003(\022B\002\020\001\022\017\n\003uid\030\004 \003(\021B\002\020"
    "\001\022\024\n\010user_sid\030\005 \003(\021B\002\020\001\022\023\n\007visible\030\006 \003(\010"
    "B\002\020\001\"\027\n\tChangeSet\022\n\n\002id\030\001 \002(\003\"l\n\004Node\022\n\n"
    "\002id\030\001 \002(\022\022\020\n\004keys\030\002 \003(\rB\002\020\001\022\020\n\004vals\030\003 \003("
    "\rB\002\020\001\022\032\n\004info\030\004 \001(\0132\014.OSMPBF.Info\022\013\n\003lat"
    "\030\010 \002(\022\022\013\n\003lon\030\t \002(\022\"{\n\nDenseNodes\022\016\n\002id\030"
    "\001 \003(\022B\002\020\001\022$\n\tdenseinfo\030\005 \001(\0132\021.OSMPBF.De"
    "nseInfo\022\017\n\003lat\030\010 \003(\022B\002\020\001\022\017\n\003lon\030\t \003(\022B\002\020"
    "\001\022\025\n\tkeys_vals\030\n \003(\005B\002\020\001\"\205\001\n\003Way\022\n\n\002id\030\001"
    " \002(\003\022\020\n\004keys\030\002 \003(\rB\002\020\001\022\020\n\004vals\030\003 \003(\rB\002\020\001"
    "\022\032\n\004info\030\004 \001(\0132\014.OSMPBF.Info\022\020\n\004refs\030\010 \003"
    "(\022B\002\020\001\022\017\n\003lat\030\t \003(\022B\002\020\001\022\017\n\003lon\030\n \003(\022B\002\020\001"
    "\"\340\001\n\010Relation\022\n\n\002id\030\001 \002(\003\022\020\n\004keys\030\002 \003(\rB"
    "\002\020\001\022\020\n\004vals\030\003 \003(\rB\002\020\001\022\032\n\004info\030\004 \001(\0132\014.OS"
    "MPBF.Info\022\025\n\troles_sid\030\010 \003(\005B\002\020\001\022\022\n\006memi"
    "ds\030\t \003(\022B\002\020\001\022.\n\005types\030\n \003(\0162\033.OSMPBF.Rel"
    "ation.MemberTypeB\002\020\001\"-\n\nMemberType\022\010\n\004NO"
    "DE\020\000\022\007\n\003WAY\020\001\022\014\n\010RELATION\020\002B\017\n\rcrosby.bi"
    "nary"
};
static ::absl::once_flag descriptor_table_osmformat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osmformat_2eproto = {
    false,
    false,
    1684,
    descriptor_table_protodef_osmformat_2eproto,
    "osmformat.proto",
    &descriptor_table_osmformat_2eproto_once,
    nullptr,
    0,
    12,
    schemas,
    file_default_instances,
    TableStruct_osmformat_2eproto::offsets,
    file_level_metadata_osmformat_2eproto,
    file_level_enum_descriptors_osmformat_2eproto,
    file_level_service_descriptors_osmformat_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osmformat_2eproto_getter() {
  return &descriptor_table_osmformat_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osmformat_2eproto(&descriptor_table_osmformat_2eproto);
namespace OSMPBF {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Relation_MemberType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osmformat_2eproto);
  return file_level_enum_descriptors_osmformat_2eproto[0];
}
bool Relation_MemberType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Relation_MemberType Relation::NODE;
constexpr Relation_MemberType Relation::WAY;
constexpr Relation_MemberType Relation::RELATION;
constexpr Relation_MemberType Relation::MemberType_MIN;
constexpr Relation_MemberType Relation::MemberType_MAX;
constexpr int Relation::MemberType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class HeaderBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderBlock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeaderBlock, _impl_._has_bits_);
  static const ::OSMPBF::HeaderBBox& bbox(const HeaderBlock* msg);
  static void set_has_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_writingprogram(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_osmosis_replication_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_osmosis_replication_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_osmosis_replication_base_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::OSMPBF::HeaderBBox&
HeaderBlock::_Internal::bbox(const HeaderBlock* msg) {
  return *msg->_impl_.bbox_;
}
HeaderBlock::HeaderBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.HeaderBlock)
}
HeaderBlock::HeaderBlock(const HeaderBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.required_features_){from._impl_.required_features_}
    , decltype(_impl_.optional_features_){from._impl_.optional_features_}
    , decltype(_impl_.writingprogram_) {}

    , decltype(_impl_.source_) {}

    , decltype(_impl_.osmosis_replication_base_url_) {}

    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.osmosis_replication_timestamp_) {}

    , decltype(_impl_.osmosis_replication_sequence_number_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.writingprogram_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.writingprogram_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.writingprogram_.Set(from._internal_writingprogram(), _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.source_.Set(from._internal_source(), _this->GetArenaForAllocation());
  }
  _impl_.osmosis_replication_base_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.osmosis_replication_base_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.osmosis_replication_base_url_.Set(from._internal_osmosis_replication_base_url(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.bbox_ = new ::OSMPBF::HeaderBBox(*from._impl_.bbox_);
  }
  ::memcpy(&_impl_.osmosis_replication_timestamp_, &from._impl_.osmosis_replication_timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.osmosis_replication_sequence_number_) -
    reinterpret_cast<char*>(&_impl_.osmosis_replication_timestamp_)) + sizeof(_impl_.osmosis_replication_sequence_number_));
  // @@protoc_insertion_point(copy_constructor:OSMPBF.HeaderBlock)
}

inline void HeaderBlock::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.required_features_){arena}
    , decltype(_impl_.optional_features_){arena}
    , decltype(_impl_.writingprogram_) {}

    , decltype(_impl_.source_) {}

    , decltype(_impl_.osmosis_replication_base_url_) {}

    , decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.osmosis_replication_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.osmosis_replication_sequence_number_) { ::int64_t{0} }

  };
  _impl_.writingprogram_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.writingprogram_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.osmosis_replication_base_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.osmosis_replication_base_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeaderBlock::~HeaderBlock() {
  // @@protoc_insertion_point(destructor:OSMPBF.HeaderBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderBlock::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_required_features()->~RepeatedPtrField();
  _internal_mutable_optional_features()->~RepeatedPtrField();
  _impl_.writingprogram_.Destroy();
  _impl_.source_.Destroy();
  _impl_.osmosis_replication_base_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.bbox_;
}

void HeaderBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.HeaderBlock)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_required_features()->Clear();
  _internal_mutable_optional_features()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.writingprogram_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.osmosis_replication_base_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.bbox_ != nullptr);
      _impl_.bbox_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.osmosis_replication_timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.osmosis_replication_sequence_number_) -
        reinterpret_cast<char*>(&_impl_.osmosis_replication_timestamp_)) + sizeof(_impl_.osmosis_replication_sequence_number_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .OSMPBF.HeaderBBox bbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string required_features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_features();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "OSMPBF.HeaderBlock.required_features");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string optional_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_optional_features();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "OSMPBF.HeaderBlock.optional_features");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string writingprogram = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_writingprogram();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "OSMPBF.HeaderBlock.writingprogram");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string source = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "OSMPBF.HeaderBlock.source");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 osmosis_replication_timestamp = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 0)) {
          _Internal::set_has_osmosis_replication_timestamp(&has_bits);
          _impl_.osmosis_replication_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 osmosis_replication_sequence_number = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_osmosis_replication_sequence_number(&has_bits);
          _impl_.osmosis_replication_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string osmosis_replication_base_url = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_osmosis_replication_base_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "OSMPBF.HeaderBlock.osmosis_replication_base_url");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeaderBlock::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.HeaderBlock)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .OSMPBF.HeaderBBox bbox = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bbox(this),
        _Internal::bbox(this).GetCachedSize(), target, stream);
  }

  // repeated string required_features = 4;
  for (int i = 0, n = this->_internal_required_features_size(); i < n; ++i) {
    const auto& s = this->_internal_required_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "OSMPBF.HeaderBlock.required_features");
    target = stream->WriteString(4, s, target);
  }

  // repeated string optional_features = 5;
  for (int i = 0, n = this->_internal_optional_features_size(); i < n; ++i) {
    const auto& s = this->_internal_optional_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "OSMPBF.HeaderBlock.optional_features");
    target = stream->WriteString(5, s, target);
  }

  // optional string writingprogram = 16;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_writingprogram();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "OSMPBF.HeaderBlock.writingprogram");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // optional string source = 17;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_source();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "OSMPBF.HeaderBlock.source");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // optional int64 osmosis_replication_timestamp = 32;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        32, this->_internal_osmosis_replication_timestamp(), target);
  }

  // optional int64 osmosis_replication_sequence_number = 33;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        33, this->_internal_osmosis_replication_sequence_number(), target);
  }

  // optional string osmosis_replication_base_url = 34;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_osmosis_replication_base_url();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "OSMPBF.HeaderBlock.osmosis_replication_base_url");
    target = stream->WriteStringMaybeAliased(34, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.HeaderBlock)
  return target;
}

::size_t HeaderBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.HeaderBlock)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_features = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_required_features().size());
  for (int i = 0, n = _internal_required_features().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_required_features().Get(i));
  }

  // repeated string optional_features = 5;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_optional_features().size());
  for (int i = 0, n = _internal_optional_features().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_optional_features().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string writingprogram = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_writingprogram());
    }

    // optional string source = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_source());
    }

    // optional string osmosis_replication_base_url = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_osmosis_replication_base_url());
    }

    // optional .OSMPBF.HeaderBBox bbox = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bbox_);
    }

    // optional int64 osmosis_replication_timestamp = 32;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_osmosis_replication_timestamp());
    }

    // optional int64 osmosis_replication_sequence_number = 33;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_osmosis_replication_sequence_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderBlock::GetClassData() const { return &_class_data_; }


void HeaderBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderBlock*>(&to_msg);
  auto& from = static_cast<const HeaderBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.HeaderBlock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_required_features()->MergeFrom(from._internal_required_features());
  _this->_internal_mutable_optional_features()->MergeFrom(from._internal_optional_features());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_writingprogram(from._internal_writingprogram());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_osmosis_replication_base_url(from._internal_osmosis_replication_base_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_bbox()->::OSMPBF::HeaderBBox::MergeFrom(
          from._internal_bbox());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.osmosis_replication_timestamp_ = from._impl_.osmosis_replication_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.osmosis_replication_sequence_number_ = from._impl_.osmosis_replication_sequence_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderBlock::CopyFrom(const HeaderBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.HeaderBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderBlock::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!_impl_.bbox_->IsInitialized()) return false;
  }
  return true;
}

void HeaderBlock::InternalSwap(HeaderBlock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_required_features()->InternalSwap(
      other->_internal_mutable_required_features());
  _internal_mutable_optional_features()->InternalSwap(
      other->_internal_mutable_optional_features());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.writingprogram_, lhs_arena,
                                       &other->_impl_.writingprogram_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_, lhs_arena,
                                       &other->_impl_.source_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.osmosis_replication_base_url_, lhs_arena,
                                       &other->_impl_.osmosis_replication_base_url_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderBlock, _impl_.osmosis_replication_sequence_number_)
      + sizeof(HeaderBlock::_impl_.osmosis_replication_sequence_number_)
      - PROTOBUF_FIELD_OFFSET(HeaderBlock, _impl_.bbox_)>(
          reinterpret_cast<char*>(&_impl_.bbox_),
          reinterpret_cast<char*>(&other->_impl_.bbox_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[0]);
}
// ===================================================================

class HeaderBBox::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderBBox>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeaderBBox, _impl_._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

HeaderBBox::HeaderBBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.HeaderBBox)
}
HeaderBBox::HeaderBBox(const HeaderBBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OSMPBF.HeaderBBox)
}

inline void HeaderBBox::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_) { ::int64_t{0} }

    , decltype(_impl_.right_) { ::int64_t{0} }

    , decltype(_impl_.top_) { ::int64_t{0} }

    , decltype(_impl_.bottom_) { ::int64_t{0} }

  };
}

HeaderBBox::~HeaderBBox() {
  // @@protoc_insertion_point(destructor:OSMPBF.HeaderBBox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderBBox::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeaderBBox::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderBBox::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.HeaderBBox)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.left_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bottom_) -
        reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.bottom_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderBBox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sint64 left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_left(&has_bits);
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required sint64 right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_right(&has_bits);
          _impl_.right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required sint64 top = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_top(&has_bits);
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required sint64 bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_bottom(&has_bits);
          _impl_.bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeaderBBox::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.HeaderBBox)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required sint64 left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        1, this->_internal_left(), target);
  }

  // required sint64 right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        2, this->_internal_right(), target);
  }

  // required sint64 top = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_top(), target);
  }

  // required sint64 bottom = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.HeaderBBox)
  return target;
}

::size_t HeaderBBox::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:OSMPBF.HeaderBBox)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required sint64 left = 1;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_left());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required sint64 right = 2;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_right());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required sint64 top = 3;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_top());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required sint64 bottom = 4;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_bottom());
  }

  return total_size;
}
::size_t HeaderBBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.HeaderBBox)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required sint64 left = 1;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_left());

    // required sint64 right = 2;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_right());

    // required sint64 top = 3;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_top());

    // required sint64 bottom = 4;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_bottom());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderBBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderBBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderBBox::GetClassData() const { return &_class_data_; }


void HeaderBBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderBBox*>(&to_msg);
  auto& from = static_cast<const HeaderBBox&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.HeaderBBox)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.left_ = from._impl_.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.right_ = from._impl_.right_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.top_ = from._impl_.top_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bottom_ = from._impl_.bottom_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderBBox::CopyFrom(const HeaderBBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.HeaderBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderBBox::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void HeaderBBox::InternalSwap(HeaderBBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderBBox, _impl_.bottom_)
      + sizeof(HeaderBBox::_impl_.bottom_)
      - PROTOBUF_FIELD_OFFSET(HeaderBBox, _impl_.left_)>(
          reinterpret_cast<char*>(&_impl_.left_),
          reinterpret_cast<char*>(&other->_impl_.left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderBBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[1]);
}
// ===================================================================

class PrimitiveBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<PrimitiveBlock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrimitiveBlock, _impl_._has_bits_);
  static const ::OSMPBF::StringTable& stringtable(const PrimitiveBlock* msg);
  static void set_has_stringtable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_granularity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lat_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lon_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_granularity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::OSMPBF::StringTable&
PrimitiveBlock::_Internal::stringtable(const PrimitiveBlock* msg) {
  return *msg->_impl_.stringtable_;
}
PrimitiveBlock::PrimitiveBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.PrimitiveBlock)
}
PrimitiveBlock::PrimitiveBlock(const PrimitiveBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrimitiveBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primitivegroup_){from._impl_.primitivegroup_}
    , decltype(_impl_.stringtable_){nullptr}
    , decltype(_impl_.lat_offset_) {}

    , decltype(_impl_.lon_offset_) {}

    , decltype(_impl_.granularity_) {}

    , decltype(_impl_.date_granularity_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.stringtable_ = new ::OSMPBF::StringTable(*from._impl_.stringtable_);
  }
  ::memcpy(&_impl_.lat_offset_, &from._impl_.lat_offset_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.date_granularity_) -
    reinterpret_cast<char*>(&_impl_.lat_offset_)) + sizeof(_impl_.date_granularity_));
  // @@protoc_insertion_point(copy_constructor:OSMPBF.PrimitiveBlock)
}

inline void PrimitiveBlock::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primitivegroup_){arena}
    , decltype(_impl_.stringtable_){nullptr}
    , decltype(_impl_.lat_offset_) { ::int64_t{0} }

    , decltype(_impl_.lon_offset_) { ::int64_t{0} }

    , decltype(_impl_.granularity_) { 100 }

    , decltype(_impl_.date_granularity_) { 1000 }

  };
}

PrimitiveBlock::~PrimitiveBlock() {
  // @@protoc_insertion_point(destructor:OSMPBF.PrimitiveBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrimitiveBlock::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_primitivegroup()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.stringtable_;
}

void PrimitiveBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrimitiveBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.PrimitiveBlock)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_primitivegroup()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.stringtable_ != nullptr);
    _impl_.stringtable_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.lat_offset_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.lon_offset_) -
        reinterpret_cast<char*>(&_impl_.lat_offset_)) + sizeof(_impl_.lon_offset_));
    _impl_.granularity_ = 100;
    _impl_.date_granularity_ = 1000;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimitiveBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .OSMPBF.StringTable stringtable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stringtable(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .OSMPBF.PrimitiveGroup primitivegroup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primitivegroup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 granularity = 17 [default = 100];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_granularity(&has_bits);
          _impl_.granularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 date_granularity = 18 [default = 1000];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_date_granularity(&has_bits);
          _impl_.date_granularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 lat_offset = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_lat_offset(&has_bits);
          _impl_.lat_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 lon_offset = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          _Internal::set_has_lon_offset(&has_bits);
          _impl_.lon_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PrimitiveBlock::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.PrimitiveBlock)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .OSMPBF.StringTable stringtable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stringtable(this),
        _Internal::stringtable(this).GetCachedSize(), target, stream);
  }

  // repeated .OSMPBF.PrimitiveGroup primitivegroup = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_primitivegroup_size()); i < n; i++) {
    const auto& repfield = this->_internal_primitivegroup(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 granularity = 17 [default = 100];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        17, this->_internal_granularity(), target);
  }

  // optional int32 date_granularity = 18 [default = 1000];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        18, this->_internal_date_granularity(), target);
  }

  // optional int64 lat_offset = 19 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        19, this->_internal_lat_offset(), target);
  }

  // optional int64 lon_offset = 20 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        20, this->_internal_lon_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.PrimitiveBlock)
  return target;
}

::size_t PrimitiveBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.PrimitiveBlock)
  ::size_t total_size = 0;

  // required .OSMPBF.StringTable stringtable = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stringtable_);
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OSMPBF.PrimitiveGroup primitivegroup = 2;
  total_size += 1UL * this->_internal_primitivegroup_size();
  for (const auto& msg : this->_internal_primitivegroup()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional int64 lat_offset = 19 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_lat_offset());
    }

    // optional int64 lon_offset = 20 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_lon_offset());
    }

    // optional int32 granularity = 17 [default = 100];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_granularity());
    }

    // optional int32 date_granularity = 18 [default = 1000];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_date_granularity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimitiveBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrimitiveBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimitiveBlock::GetClassData() const { return &_class_data_; }


void PrimitiveBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrimitiveBlock*>(&to_msg);
  auto& from = static_cast<const PrimitiveBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.PrimitiveBlock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_primitivegroup()->MergeFrom(from._internal_primitivegroup());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stringtable()->::OSMPBF::StringTable::MergeFrom(
          from._internal_stringtable());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lat_offset_ = from._impl_.lat_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lon_offset_ = from._impl_.lon_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.granularity_ = from._impl_.granularity_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.date_granularity_ = from._impl_.date_granularity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimitiveBlock::CopyFrom(const PrimitiveBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.PrimitiveBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveBlock::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_primitivegroup()))
    return false;
  return true;
}

void PrimitiveBlock::InternalSwap(PrimitiveBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_primitivegroup()->InternalSwap(other->_internal_mutable_primitivegroup());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrimitiveBlock, _impl_.date_granularity_)
      + sizeof(PrimitiveBlock::_impl_.date_granularity_)
      - PROTOBUF_FIELD_OFFSET(PrimitiveBlock, _impl_.stringtable_)>(
          reinterpret_cast<char*>(&_impl_.stringtable_),
          reinterpret_cast<char*>(&other->_impl_.stringtable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimitiveBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[2]);
}
// ===================================================================

class PrimitiveGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<PrimitiveGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrimitiveGroup, _impl_._has_bits_);
  static const ::OSMPBF::DenseNodes& dense(const PrimitiveGroup* msg);
  static void set_has_dense(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::OSMPBF::DenseNodes&
PrimitiveGroup::_Internal::dense(const PrimitiveGroup* msg) {
  return *msg->_impl_.dense_;
}
PrimitiveGroup::PrimitiveGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.PrimitiveGroup)
}
PrimitiveGroup::PrimitiveGroup(const PrimitiveGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrimitiveGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.ways_){from._impl_.ways_}
    , decltype(_impl_.relations_){from._impl_.relations_}
    , decltype(_impl_.changesets_){from._impl_.changesets_}
    , decltype(_impl_.dense_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.dense_ = new ::OSMPBF::DenseNodes(*from._impl_.dense_);
  }
  // @@protoc_insertion_point(copy_constructor:OSMPBF.PrimitiveGroup)
}

inline void PrimitiveGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nodes_){arena}
    , decltype(_impl_.ways_){arena}
    , decltype(_impl_.relations_){arena}
    , decltype(_impl_.changesets_){arena}
    , decltype(_impl_.dense_){nullptr}
  };
}

PrimitiveGroup::~PrimitiveGroup() {
  // @@protoc_insertion_point(destructor:OSMPBF.PrimitiveGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrimitiveGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_nodes()->~RepeatedPtrField();
  _internal_mutable_ways()->~RepeatedPtrField();
  _internal_mutable_relations()->~RepeatedPtrField();
  _internal_mutable_changesets()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.dense_;
}

void PrimitiveGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrimitiveGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.PrimitiveGroup)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_nodes()->Clear();
  _internal_mutable_ways()->Clear();
  _internal_mutable_relations()->Clear();
  _internal_mutable_changesets()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.dense_ != nullptr);
    _impl_.dense_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimitiveGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .OSMPBF.Node nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .OSMPBF.DenseNodes dense = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dense(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .OSMPBF.Way ways = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ways(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .OSMPBF.Relation relations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .OSMPBF.ChangeSet changesets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changesets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PrimitiveGroup::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.PrimitiveGroup)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OSMPBF.Node nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .OSMPBF.DenseNodes dense = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dense(this),
        _Internal::dense(this).GetCachedSize(), target, stream);
  }

  // repeated .OSMPBF.Way ways = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ways_size()); i < n; i++) {
    const auto& repfield = this->_internal_ways(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .OSMPBF.Relation relations = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_relations_size()); i < n; i++) {
    const auto& repfield = this->_internal_relations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .OSMPBF.ChangeSet changesets = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_changesets_size()); i < n; i++) {
    const auto& repfield = this->_internal_changesets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.PrimitiveGroup)
  return target;
}

::size_t PrimitiveGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.PrimitiveGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OSMPBF.Node nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_internal_nodes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OSMPBF.Way ways = 3;
  total_size += 1UL * this->_internal_ways_size();
  for (const auto& msg : this->_internal_ways()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OSMPBF.Relation relations = 4;
  total_size += 1UL * this->_internal_relations_size();
  for (const auto& msg : this->_internal_relations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OSMPBF.ChangeSet changesets = 5;
  total_size += 1UL * this->_internal_changesets_size();
  for (const auto& msg : this->_internal_changesets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .OSMPBF.DenseNodes dense = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dense_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimitiveGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrimitiveGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimitiveGroup::GetClassData() const { return &_class_data_; }


void PrimitiveGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrimitiveGroup*>(&to_msg);
  auto& from = static_cast<const PrimitiveGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.PrimitiveGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nodes()->MergeFrom(from._internal_nodes());
  _this->_internal_mutable_ways()->MergeFrom(from._internal_ways());
  _this->_internal_mutable_relations()->MergeFrom(from._internal_relations());
  _this->_internal_mutable_changesets()->MergeFrom(from._internal_changesets());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_dense()->::OSMPBF::DenseNodes::MergeFrom(
        from._internal_dense());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimitiveGroup::CopyFrom(const PrimitiveGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.PrimitiveGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveGroup::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_nodes()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_ways()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_relations()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_changesets()))
    return false;
  return true;
}

void PrimitiveGroup::InternalSwap(PrimitiveGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_nodes()->InternalSwap(other->_internal_mutable_nodes());
  _internal_mutable_ways()->InternalSwap(other->_internal_mutable_ways());
  _internal_mutable_relations()->InternalSwap(other->_internal_mutable_relations());
  _internal_mutable_changesets()->InternalSwap(other->_internal_mutable_changesets());
  swap(_impl_.dense_, other->_impl_.dense_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimitiveGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[3]);
}
// ===================================================================

class StringTable::_Internal {
 public:
};

StringTable::StringTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.StringTable)
}
StringTable::StringTable(const StringTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.s_){from._impl_.s_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OSMPBF.StringTable)
}

inline void StringTable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.s_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StringTable::~StringTable() {
  // @@protoc_insertion_point(destructor:OSMPBF.StringTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringTable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_s()->~RepeatedPtrField();
}

void StringTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringTable::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.StringTable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_s()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_s();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StringTable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.StringTable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes s = 1;
  for (int i = 0, n = this->_internal_s_size(); i < n; ++i) {
    const auto& s = this->_internal_s(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.StringTable)
  return target;
}

::size_t StringTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.StringTable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes s = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_s().size());
  for (int i = 0, n = _internal_s().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_s().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringTable::GetClassData() const { return &_class_data_; }


void StringTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringTable*>(&to_msg);
  auto& from = static_cast<const StringTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.StringTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_s()->MergeFrom(from._internal_s());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringTable::CopyFrom(const StringTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.StringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringTable::IsInitialized() const {
  return true;
}

void StringTable::InternalSwap(StringTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_s()->InternalSwap(
      other->_internal_mutable_s());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[4]);
}
// ===================================================================

class Info::_Internal {
 public:
  using HasBits = decltype(std::declval<Info>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Info, _impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_changeset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Info::Info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.Info)
}
Info::Info(const Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OSMPBF.Info)
}

inline void Info::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , decltype(_impl_.changeset_) { ::int64_t{0} }

    , decltype(_impl_.uid_) { 0 }

    , decltype(_impl_.user_sid_) { 0u }

    , decltype(_impl_.visible_) { false }

    , decltype(_impl_.version_) { -1 }

  };
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:OSMPBF.Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Info::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.Info)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.visible_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.visible_));
    _impl_.version_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 version = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 changeset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_changeset(&has_bits);
          _impl_.changeset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_uid(&has_bits);
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 user_sid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_user_sid(&has_bits);
          _impl_.user_sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool visible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_visible(&has_bits);
          _impl_.visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Info::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.Info)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 version = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_version(), target);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_timestamp(), target);
  }

  // optional int64 changeset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_changeset(), target);
  }

  // optional int32 uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_uid(), target);
  }

  // optional uint32 user_sid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_user_sid(), target);
  }

  // optional bool visible = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.Info)
  return target;
}

::size_t Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.Info)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional int64 changeset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_changeset());
    }

    // optional int32 uid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_uid());
    }

    // optional uint32 user_sid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_user_sid());
    }

    // optional bool visible = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional int32 version = 1 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Info::GetClassData() const { return &_class_data_; }


void Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Info*>(&to_msg);
  auto& from = static_cast<const Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.Info)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.changeset_ = from._impl_.changeset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.uid_ = from._impl_.uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_sid_ = from._impl_.user_sid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.visible_ = from._impl_.visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {
  return true;
}

void Info::InternalSwap(Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Info, _impl_.version_)
      + sizeof(Info::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(Info, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[5]);
}
// ===================================================================

class DenseInfo::_Internal {
 public:
};

DenseInfo::DenseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.DenseInfo)
}
DenseInfo::DenseInfo(const DenseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DenseInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_) { from._impl_.version_ }
    ,/* _impl_._version_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.timestamp_) { from._impl_.timestamp_ }
    ,/* _impl_._timestamp_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.changeset_) { from._impl_.changeset_ }
    ,/* _impl_._changeset_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.uid_) { from._impl_.uid_ }
    ,/* _impl_._uid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.user_sid_) { from._impl_.user_sid_ }
    ,/* _impl_._user_sid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.visible_) { from._impl_.visible_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OSMPBF.DenseInfo)
}

inline void DenseInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.version_) { arena }
    ,/* _impl_._version_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.timestamp_) { arena }
    ,/* _impl_._timestamp_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.changeset_) { arena }
    ,/* _impl_._changeset_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.uid_) { arena }
    ,/* _impl_._uid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.user_sid_) { arena }
    ,/* _impl_._user_sid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.visible_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DenseInfo::~DenseInfo() {
  // @@protoc_insertion_point(destructor:OSMPBF.DenseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenseInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.~RepeatedField();
  _impl_.timestamp_.~RepeatedField();
  _impl_.changeset_.~RepeatedField();
  _impl_.uid_.~RepeatedField();
  _impl_.user_sid_.~RepeatedField();
  _impl_.visible_.~RepeatedField();
}

void DenseInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DenseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.DenseInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_version()->Clear();
  _internal_mutable_timestamp()->Clear();
  _internal_mutable_changeset()->Clear();
  _internal_mutable_uid()->Clear();
  _internal_mutable_user_sid()->Clear();
  _internal_mutable_visible()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DenseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 version = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint64 timestamp = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint64 changeset = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_changeset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_changeset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint32 uid = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_uid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          _internal_add_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint32 user_sid = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_user_sid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 40) {
          _internal_add_user_sid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bool visible = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_visible(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 48) {
          _internal_add_visible(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DenseInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.DenseInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 version = 1 [packed = true];
  {
    int byte_size = _impl_._version_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(1, _internal_version(),
                                                 byte_size, target);
    }
  }

  // repeated sint64 timestamp = 2 [packed = true];
  {
    int byte_size = _impl_._timestamp_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(2, _internal_timestamp(),
                                                 byte_size, target);
    }
  }

  // repeated sint64 changeset = 3 [packed = true];
  {
    int byte_size = _impl_._changeset_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(3, _internal_changeset(),
                                                 byte_size, target);
    }
  }

  // repeated sint32 uid = 4 [packed = true];
  {
    int byte_size = _impl_._uid_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(4, _internal_uid(),
                                                 byte_size, target);
    }
  }

  // repeated sint32 user_sid = 5 [packed = true];
  {
    int byte_size = _impl_._user_sid_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(5, _internal_user_sid(),
                                                 byte_size, target);
    }
  }

  // repeated bool visible = 6 [packed = true];
  if (this->_internal_visible_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.DenseInfo)
  return target;
}

::size_t DenseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.DenseInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 version = 1 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_version())
    ;
    _impl_._version_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated sint64 timestamp = 2 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt64Size(
        this->_internal_timestamp())
    ;
    _impl_._timestamp_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated sint64 changeset = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt64Size(
        this->_internal_changeset())
    ;
    _impl_._changeset_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated sint32 uid = 4 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_uid())
    ;
    _impl_._uid_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated sint32 user_sid = 5 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_user_sid())
    ;
    _impl_._user_sid_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated bool visible = 6 [packed = true];
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_visible_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DenseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DenseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DenseInfo::GetClassData() const { return &_class_data_; }


void DenseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DenseInfo*>(&to_msg);
  auto& from = static_cast<const DenseInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.DenseInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.version_.MergeFrom(from._impl_.version_);
  _this->_impl_.timestamp_.MergeFrom(from._impl_.timestamp_);
  _this->_impl_.changeset_.MergeFrom(from._impl_.changeset_);
  _this->_impl_.uid_.MergeFrom(from._impl_.uid_);
  _this->_impl_.user_sid_.MergeFrom(from._impl_.user_sid_);
  _this->_impl_.visible_.MergeFrom(from._impl_.visible_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DenseInfo::CopyFrom(const DenseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.DenseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseInfo::IsInitialized() const {
  return true;
}

void DenseInfo::InternalSwap(DenseInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.version_.InternalSwap(&other->_impl_.version_);
  _impl_.timestamp_.InternalSwap(&other->_impl_.timestamp_);
  _impl_.changeset_.InternalSwap(&other->_impl_.changeset_);
  _impl_.uid_.InternalSwap(&other->_impl_.uid_);
  _impl_.user_sid_.InternalSwap(&other->_impl_.user_sid_);
  _impl_.visible_.InternalSwap(&other->_impl_.visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[6]);
}
// ===================================================================

class ChangeSet::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeSet>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChangeSet, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ChangeSet::ChangeSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.ChangeSet)
}
ChangeSet::ChangeSet(const ChangeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OSMPBF.ChangeSet)
}

inline void ChangeSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) { ::int64_t{0} }

  };
}

ChangeSet::~ChangeSet() {
  // @@protoc_insertion_point(destructor:OSMPBF.ChangeSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChangeSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.ChangeSet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChangeSet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.ChangeSet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.ChangeSet)
  return target;
}

::size_t ChangeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.ChangeSet)
  ::size_t total_size = 0;

  // required int64 id = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangeSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeSet::GetClassData() const { return &_class_data_; }


void ChangeSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangeSet*>(&to_msg);
  auto& from = static_cast<const ChangeSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.ChangeSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeSet::CopyFrom(const ChangeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.ChangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ChangeSet::InternalSwap(ChangeSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[7]);
}
// ===================================================================

class Node::_Internal {
 public:
  using HasBits = decltype(std::declval<Node>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Node, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::OSMPBF::Info& info(const Node* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::OSMPBF::Info&
Node::_Internal::info(const Node* msg) {
  return *msg->_impl_.info_;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_) { from._impl_.keys_ }
    ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.vals_) { from._impl_.vals_ }
    ,/* _impl_._vals_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.lat_) {}

    , decltype(_impl_.lon_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.info_ = new ::OSMPBF::Info(*from._impl_.info_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.lon_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.lon_));
  // @@protoc_insertion_point(copy_constructor:OSMPBF.Node)
}

inline void Node::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_) { arena }
    ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.vals_) { arena }
    ,/* _impl_._vals_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.id_) { ::int64_t{0} }

    , decltype(_impl_.lat_) { ::int64_t{0} }

    , decltype(_impl_.lon_) { ::int64_t{0} }

  };
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:OSMPBF.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
  _impl_.vals_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.Node)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _internal_mutable_vals()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.lon_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.lon_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 keys = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 vals = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .OSMPBF.Info info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required sint64 lat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_lat(&has_bits);
          _impl_.lat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required sint64 lon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_lon(&has_bits);
          _impl_.lon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Node::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.Node)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required sint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        1, this->_internal_id(), target);
  }

  // repeated uint32 keys = 2 [packed = true];
  {
    int byte_size = _impl_._keys_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(2, _internal_keys(),
                                                 byte_size, target);
    }
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    int byte_size = _impl_._vals_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(3, _internal_vals(),
                                                 byte_size, target);
    }
  }

  // optional .OSMPBF.Info info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // required sint64 lat = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        8, this->_internal_lat(), target);
  }

  // required sint64 lon = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        9, this->_internal_lon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.Node)
  return target;
}

::size_t Node::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:OSMPBF.Node)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required sint64 id = 1;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_id());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required sint64 lat = 8;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_lat());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required sint64 lon = 9;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_lon());
  }

  return total_size;
}
::size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.Node)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required sint64 id = 1;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_id());

    // required sint64 lat = 8;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_lat());

    // required sint64 lon = 9;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_lon());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 keys = 2 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_keys())
    ;
    _impl_._keys_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_vals())
    ;
    _impl_._vals_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // optional .OSMPBF.Info info = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.Node)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.vals_.MergeFrom(from._impl_.vals_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_info()->::OSMPBF::Info::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lat_ = from._impl_.lat_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lon_ = from._impl_.lon_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.vals_.InternalSwap(&other->_impl_.vals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, _impl_.lon_)
      + sizeof(Node::_impl_.lon_)
      - PROTOBUF_FIELD_OFFSET(Node, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[8]);
}
// ===================================================================

class DenseNodes::_Internal {
 public:
  using HasBits = decltype(std::declval<DenseNodes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DenseNodes, _impl_._has_bits_);
  static const ::OSMPBF::DenseInfo& denseinfo(const DenseNodes* msg);
  static void set_has_denseinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::OSMPBF::DenseInfo&
DenseNodes::_Internal::denseinfo(const DenseNodes* msg) {
  return *msg->_impl_.denseinfo_;
}
DenseNodes::DenseNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.DenseNodes)
}
DenseNodes::DenseNodes(const DenseNodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DenseNodes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) { from._impl_.id_ }
    ,/* _impl_._id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.lat_) { from._impl_.lat_ }
    ,/* _impl_._lat_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.lon_) { from._impl_.lon_ }
    ,/* _impl_._lon_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.keys_vals_) { from._impl_.keys_vals_ }
    ,/* _impl_._keys_vals_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.denseinfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.denseinfo_ = new ::OSMPBF::DenseInfo(*from._impl_.denseinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:OSMPBF.DenseNodes)
}

inline void DenseNodes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) { arena }
    ,/* _impl_._id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.lat_) { arena }
    ,/* _impl_._lat_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.lon_) { arena }
    ,/* _impl_._lon_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.keys_vals_) { arena }
    ,/* _impl_._keys_vals_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.denseinfo_){nullptr}
  };
}

DenseNodes::~DenseNodes() {
  // @@protoc_insertion_point(destructor:OSMPBF.DenseNodes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenseNodes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.~RepeatedField();
  _impl_.lat_.~RepeatedField();
  _impl_.lon_.~RepeatedField();
  _impl_.keys_vals_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.denseinfo_;
}

void DenseNodes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DenseNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.DenseNodes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_id()->Clear();
  _internal_mutable_lat()->Clear();
  _internal_mutable_lon()->Clear();
  _internal_mutable_keys_vals()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.denseinfo_ != nullptr);
    _impl_.denseinfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DenseNodes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sint64 id = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .OSMPBF.DenseInfo denseinfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_denseinfo(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint64 lat = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_lat(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 64) {
          _internal_add_lat(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint64 lon = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_lon(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 72) {
          _internal_add_lon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 keys_vals = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keys_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 80) {
          _internal_add_keys_vals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DenseNodes::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.DenseNodes)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 id = 1 [packed = true];
  {
    int byte_size = _impl_._id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(1, _internal_id(),
                                                 byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .OSMPBF.DenseInfo denseinfo = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::denseinfo(this),
        _Internal::denseinfo(this).GetCachedSize(), target, stream);
  }

  // repeated sint64 lat = 8 [packed = true];
  {
    int byte_size = _impl_._lat_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(8, _internal_lat(),
                                                 byte_size, target);
    }
  }

  // repeated sint64 lon = 9 [packed = true];
  {
    int byte_size = _impl_._lon_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(9, _internal_lon(),
                                                 byte_size, target);
    }
  }

  // repeated int32 keys_vals = 10 [packed = true];
  {
    int byte_size = _impl_._keys_vals_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(10, _internal_keys_vals(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.DenseNodes)
  return target;
}

::size_t DenseNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.DenseNodes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint64 id = 1 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt64Size(
        this->_internal_id())
    ;
    _impl_._id_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated sint64 lat = 8 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt64Size(
        this->_internal_lat())
    ;
    _impl_._lat_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated sint64 lon = 9 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt64Size(
        this->_internal_lon())
    ;
    _impl_._lon_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 keys_vals = 10 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_keys_vals())
    ;
    _impl_._keys_vals_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // optional .OSMPBF.DenseInfo denseinfo = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.denseinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DenseNodes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DenseNodes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DenseNodes::GetClassData() const { return &_class_data_; }


void DenseNodes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DenseNodes*>(&to_msg);
  auto& from = static_cast<const DenseNodes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.DenseNodes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.id_.MergeFrom(from._impl_.id_);
  _this->_impl_.lat_.MergeFrom(from._impl_.lat_);
  _this->_impl_.lon_.MergeFrom(from._impl_.lon_);
  _this->_impl_.keys_vals_.MergeFrom(from._impl_.keys_vals_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_denseinfo()->::OSMPBF::DenseInfo::MergeFrom(
        from._internal_denseinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DenseNodes::CopyFrom(const DenseNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.DenseNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseNodes::IsInitialized() const {
  return true;
}

void DenseNodes::InternalSwap(DenseNodes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.id_.InternalSwap(&other->_impl_.id_);
  _impl_.lat_.InternalSwap(&other->_impl_.lat_);
  _impl_.lon_.InternalSwap(&other->_impl_.lon_);
  _impl_.keys_vals_.InternalSwap(&other->_impl_.keys_vals_);
  swap(_impl_.denseinfo_, other->_impl_.denseinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenseNodes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[9]);
}
// ===================================================================

class Way::_Internal {
 public:
  using HasBits = decltype(std::declval<Way>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Way, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::OSMPBF::Info& info(const Way* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::OSMPBF::Info&
Way::_Internal::info(const Way* msg) {
  return *msg->_impl_.info_;
}
Way::Way(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.Way)
}
Way::Way(const Way& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Way* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_) { from._impl_.keys_ }
    ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.vals_) { from._impl_.vals_ }
    ,/* _impl_._vals_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.refs_) { from._impl_.refs_ }
    ,/* _impl_._refs_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.lat_) { from._impl_.lat_ }
    ,/* _impl_._lat_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.lon_) { from._impl_.lon_ }
    ,/* _impl_._lon_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.info_ = new ::OSMPBF::Info(*from._impl_.info_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:OSMPBF.Way)
}

inline void Way::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_) { arena }
    ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.vals_) { arena }
    ,/* _impl_._vals_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.refs_) { arena }
    ,/* _impl_._refs_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.lat_) { arena }
    ,/* _impl_._lat_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.lon_) { arena }
    ,/* _impl_._lon_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.id_) { ::int64_t{0} }

  };
}

Way::~Way() {
  // @@protoc_insertion_point(destructor:OSMPBF.Way)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Way::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
  _impl_.vals_.~RepeatedField();
  _impl_.refs_.~RepeatedField();
  _impl_.lat_.~RepeatedField();
  _impl_.lon_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void Way::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Way::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.Way)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _internal_mutable_vals()->Clear();
  _internal_mutable_refs()->Clear();
  _internal_mutable_lat()->Clear();
  _internal_mutable_lon()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Way::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 keys = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 vals = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .OSMPBF.Info info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint64 refs = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_refs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 64) {
          _internal_add_refs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint64 lat = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_lat(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 72) {
          _internal_add_lat(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint64 lon = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_lon(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 80) {
          _internal_add_lon(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Way::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.Way)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_id(), target);
  }

  // repeated uint32 keys = 2 [packed = true];
  {
    int byte_size = _impl_._keys_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(2, _internal_keys(),
                                                 byte_size, target);
    }
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    int byte_size = _impl_._vals_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(3, _internal_vals(),
                                                 byte_size, target);
    }
  }

  // optional .OSMPBF.Info info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // repeated sint64 refs = 8 [packed = true];
  {
    int byte_size = _impl_._refs_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(8, _internal_refs(),
                                                 byte_size, target);
    }
  }

  // repeated sint64 lat = 9 [packed = true];
  {
    int byte_size = _impl_._lat_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(9, _internal_lat(),
                                                 byte_size, target);
    }
  }

  // repeated sint64 lon = 10 [packed = true];
  {
    int byte_size = _impl_._lon_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(10, _internal_lon(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.Way)
  return target;
}

::size_t Way::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.Way)
  ::size_t total_size = 0;

  // required int64 id = 1;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 keys = 2 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_keys())
    ;
    _impl_._keys_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_vals())
    ;
    _impl_._vals_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated sint64 refs = 8 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt64Size(
        this->_internal_refs())
    ;
    _impl_._refs_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated sint64 lat = 9 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt64Size(
        this->_internal_lat())
    ;
    _impl_._lat_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated sint64 lon = 10 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt64Size(
        this->_internal_lon())
    ;
    _impl_._lon_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // optional .OSMPBF.Info info = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Way::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Way::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Way::GetClassData() const { return &_class_data_; }


void Way::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Way*>(&to_msg);
  auto& from = static_cast<const Way&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.Way)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.vals_.MergeFrom(from._impl_.vals_);
  _this->_impl_.refs_.MergeFrom(from._impl_.refs_);
  _this->_impl_.lat_.MergeFrom(from._impl_.lat_);
  _this->_impl_.lon_.MergeFrom(from._impl_.lon_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_info()->::OSMPBF::Info::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Way::CopyFrom(const Way& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.Way)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Way::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Way::InternalSwap(Way* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.vals_.InternalSwap(&other->_impl_.vals_);
  _impl_.refs_.InternalSwap(&other->_impl_.refs_);
  _impl_.lat_.InternalSwap(&other->_impl_.lat_);
  _impl_.lon_.InternalSwap(&other->_impl_.lon_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Way, _impl_.id_)
      + sizeof(Way::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Way, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Way::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[10]);
}
// ===================================================================

class Relation::_Internal {
 public:
  using HasBits = decltype(std::declval<Relation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Relation, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::OSMPBF::Info& info(const Relation* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::OSMPBF::Info&
Relation::_Internal::info(const Relation* msg) {
  return *msg->_impl_.info_;
}
Relation::Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:OSMPBF.Relation)
}
Relation::Relation(const Relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Relation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_) { from._impl_.keys_ }
    ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.vals_) { from._impl_.vals_ }
    ,/* _impl_._vals_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.roles_sid_) { from._impl_.roles_sid_ }
    ,/* _impl_._roles_sid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.memids_) { from._impl_.memids_ }
    ,/* _impl_._memids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.types_) { from._internal_types() }
    , /*decltype(_impl_._types_cached_byte_size_)*/ { 0 }

    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.info_ = new ::OSMPBF::Info(*from._impl_.info_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:OSMPBF.Relation)
}

inline void Relation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_) { arena }
    ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.vals_) { arena }
    ,/* _impl_._vals_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.roles_sid_) { arena }
    ,/* _impl_._roles_sid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.memids_) { arena }
    ,/* _impl_._memids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.types_) { arena }
    , /*decltype(_impl_._types_cached_byte_size_)*/ { 0 }

    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.id_) { ::int64_t{0} }

  };
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:OSMPBF.Relation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Relation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
  _impl_.vals_.~RepeatedField();
  _impl_.roles_sid_.~RepeatedField();
  _impl_.memids_.~RepeatedField();
  _internal_mutable_types()->~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void Relation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:OSMPBF.Relation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _internal_mutable_vals()->Clear();
  _internal_mutable_roles_sid()->Clear();
  _internal_mutable_memids()->Clear();
  _internal_mutable_types()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Relation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 keys = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 vals = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .OSMPBF.Info info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 roles_sid = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_roles_sid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 64) {
          _internal_add_roles_sid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint64 memids = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_memids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 72) {
          _internal_add_memids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .OSMPBF.Relation.MemberType types = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_types(), ptr, ctx, ::OSMPBF::Relation_MemberType_IsValid, &_internal_metadata_, 10);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 80) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::OSMPBF::Relation_MemberType_IsValid(static_cast<int>(val)))) {
            _internal_add_types(static_cast<::OSMPBF::Relation_MemberType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Relation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OSMPBF.Relation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_id(), target);
  }

  // repeated uint32 keys = 2 [packed = true];
  {
    int byte_size = _impl_._keys_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(2, _internal_keys(),
                                                 byte_size, target);
    }
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    int byte_size = _impl_._vals_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(3, _internal_vals(),
                                                 byte_size, target);
    }
  }

  // optional .OSMPBF.Info info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // repeated int32 roles_sid = 8 [packed = true];
  {
    int byte_size = _impl_._roles_sid_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(8, _internal_roles_sid(),
                                                 byte_size, target);
    }
  }

  // repeated sint64 memids = 9 [packed = true];
  {
    int byte_size = _impl_._memids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(9, _internal_memids(),
                                                 byte_size, target);
    }
  }

  // repeated .OSMPBF.Relation.MemberType types = 10 [packed = true];
  {
    int byte_size = _impl_._types_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(10, _internal_types(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OSMPBF.Relation)
  return target;
}

::size_t Relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OSMPBF.Relation)
  ::size_t total_size = 0;

  // required int64 id = 1;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 keys = 2 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_keys())
    ;
    _impl_._keys_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint32 vals = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_vals())
    ;
    _impl_._vals_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 roles_sid = 8 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_roles_sid())
    ;
    _impl_._roles_sid_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated sint64 memids = 9 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt64Size(
        this->_internal_memids())
    ;
    _impl_._memids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated .OSMPBF.Relation.MemberType types = 10 [packed = true];
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_types_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_types(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._types_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }

  // optional .OSMPBF.Info info = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Relation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Relation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Relation::GetClassData() const { return &_class_data_; }


void Relation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Relation*>(&to_msg);
  auto& from = static_cast<const Relation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OSMPBF.Relation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.vals_.MergeFrom(from._impl_.vals_);
  _this->_impl_.roles_sid_.MergeFrom(from._impl_.roles_sid_);
  _this->_impl_.memids_.MergeFrom(from._impl_.memids_);
  _this->_internal_mutable_types()->MergeFrom(from._internal_types());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_info()->::OSMPBF::Info::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OSMPBF.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Relation::InternalSwap(Relation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.vals_.InternalSwap(&other->_impl_.vals_);
  _impl_.roles_sid_.InternalSwap(&other->_impl_.roles_sid_);
  _impl_.memids_.InternalSwap(&other->_impl_.memids_);
  _internal_mutable_types()->InternalSwap(
      other->_internal_mutable_types());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Relation, _impl_.id_)
      + sizeof(Relation::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Relation, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Relation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osmformat_2eproto_getter, &descriptor_table_osmformat_2eproto_once,
      file_level_metadata_osmformat_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace OSMPBF
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OSMPBF::HeaderBlock*
Arena::CreateMaybeMessage< ::OSMPBF::HeaderBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::HeaderBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::HeaderBBox*
Arena::CreateMaybeMessage< ::OSMPBF::HeaderBBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::HeaderBBox >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::PrimitiveBlock*
Arena::CreateMaybeMessage< ::OSMPBF::PrimitiveBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::PrimitiveBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::PrimitiveGroup*
Arena::CreateMaybeMessage< ::OSMPBF::PrimitiveGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::PrimitiveGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::StringTable*
Arena::CreateMaybeMessage< ::OSMPBF::StringTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::StringTable >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::Info*
Arena::CreateMaybeMessage< ::OSMPBF::Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::Info >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::DenseInfo*
Arena::CreateMaybeMessage< ::OSMPBF::DenseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::DenseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::ChangeSet*
Arena::CreateMaybeMessage< ::OSMPBF::ChangeSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::ChangeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::Node*
Arena::CreateMaybeMessage< ::OSMPBF::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::DenseNodes*
Arena::CreateMaybeMessage< ::OSMPBF::DenseNodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::DenseNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::Way*
Arena::CreateMaybeMessage< ::OSMPBF::Way >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::Way >(arena);
}
template<> PROTOBUF_NOINLINE ::OSMPBF::Relation*
Arena::CreateMaybeMessage< ::OSMPBF::Relation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OSMPBF::Relation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
